// 归并排序
void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

// 动态规划：最长公共子序���
int lcs(char *X, char *Y, int m, int n) {
    int L[m + 1][n + 1];
    int i, j;
    for (i = 0; i <= m; i++) {
        for (j = 0; j <= n; j++) {
            if (i == 0 || j == 0)
                L[i][j] = 0;
            else if (X[i - 1] == Y[j - 1])
                L[i][j] = L[i - 1][j - 1] + 1;
            else
                L[i][j] = max(L[i - 1][j], L[i][j - 1]);
        }
    }
    return L[m][n];
}

// 图算法：深度优先搜索
void DFSUtil(int v, bool visited[], int graph[V][V]) {
    visited[v] = true;
    printf("%d ", v);
    for (int i = 0; i < V; i++)
        if (graph[v][i] && !visited[i])
            DFSUtil(i, visited, graph);
}

void DFS(int graph[V][V], int v) {
    bool visited[V];
    for (int i = 0; i < V; i++)
        visited[i] = false;
    DFSUtil(v, visited, graph);
}

// 高级数据结构：红黑树的插入操作
void insertRBTree(struct Node **root, int data) {
    struct Node *node = createNode(data);
    struct Node *y = NULL;
    struct Node *x = *root;
    while (x != NULL) {
        y = x;
        if (node->data < x->data)
            x = x->left;
        else
            x = x->right;
    }
    node->parent = y;
    if (y == NULL)
        *root = node;
    else if (node->data < y->data)
        y->left = node;
    else
        y->right = node;
    insertFixup(root, node);
}